概念部分：

软件熵：软件的无序程度，软件熵用来表示软件经过不断修改后无序程度提高的现象。


Software Engineering：将系统化的、规范的、可度量的方法用于软件的开发、运行、维护的过程，即将工程化应用于软件开发中。
软件架构：是一个整体的规划，亦是软件工程的指导方针。

优秀的软件架构 亦是组件抽象，没有复杂的依赖关系，易于 扩展分离。拥抱变化是软件架构设计的关注点。

变更成本指的是软件系统在对应业务等外界条件变化所付出的成本，通常通过软件熵来体现。
软件架构的本质在于设计系统的结构 ，为系统的形成提供决策，以达到提升软件质量，使得系统更加有序，减少软件熵的目的。

架构设计思维：
(1)简化思维：降低事物的复杂度，有更少的细节来代替较多的细节。即抽象
(2)分层思维：我们通常会将一个复杂的系统划分为多个层级，以产生单向的依赖关系。绝大多数的分层架构模式都是自顶向下的。
自顶向下不仅可以理解为就够事件流的传递和依赖是自顶向下的，也可以理解为架构的设计方式是从宏观到细节，从整体到局部的这种自顶向下。
(3)分治思维：将一个复杂的问题划分为多个子问题，分别进行处理，最后达到解决这个问题的目标。
(4)迭代思维：没有任何一款优秀的架构能够一蹴而就，在架构创建完成后，持续收集用户的反馈进行迭代改进是必不可少的环节，
这就是迭代思维，亦是演化思维和进化思维。

康威定律：系统设计的结构必定复制设计该系统的组织的沟通结果。即：系统的组织结构等价于其组织沟通结果。